name: CMake-arch

on:
#- push
#- pull_request

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-20.04
    container: archlinux

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: pacman --noconfirm -Sy cmake make gcc liburing

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash

      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        mkdir build && cd build
        cmake .. \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCPPCORO_USE_IO_RING=ON \
          -DCPPCORO_TESTS_LIMITED_RESOURCES=ON

    - name: Build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cd build && cmake --build . --config $BUILD_TYPE

    - name: Test
      shell: bash
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        cd build && ctest --output-on-failure -C $BUILD_TYPE
